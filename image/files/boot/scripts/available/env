#!/usr/bin/env ruby
# frozen_string_literal: true

# Provides environment export.
class EnvExp < Hash
  autoload(:Shellwords, 'shellwords')
  autoload(:Pathname, 'pathname')

  # @param [ENV|Hash] env
  def initialize(env = ENV)
    env.clone.to_h.sort.to_h.each do |k, v|
      self[k] = v
    end
  end

  # @return [String]
  def to_s
    self.map { |k, v| "#{k}=#{Shellwords.escape(v)}\n" }.join
  end

  # Environment formatted, with ``export``.
  #
  # @return [String]
  def export
    to_s.lines.map { |line| "export #{line}" }.join
  end

  # Get string representation followed by the content of given file.
  #
  # @return [String]
  def append(filepath, format = :to_s)
    # @formatter:off
    [
      self.public_send(format),
      Pathname.new(filepath).read.lstrip,
    ].join("\n")
    # @formatter:on
  end

  # Get string representation preceded by the content of given file.
  #
  # @return [String]
  def prepend(filepath, format = :to_s)
    # @formatter:off
    [
      Pathname.new(filepath).read.rstrip,
      self.public_send(format),
    ].join("\n")
    # @formatter:on
  end
end

# Execution
#
# Write files:
# * /etc/profile.d/environment.sh
# * /etc/environment
#
# Shares environment, retrieved from Docker, to be seen from shells (ssh).
if __FILE__ == $PROGRAM_NAME
  require 'pathname'
  require 'fileutils'
  # rubocop:disable Style/MixinUsage
  include(FileUtils::Verbose)
  # rubocop:enable Style/MixinUsage

  at_exit { GC.start }

  EnvExp.new.tap do |env|
    env.delete_if do |k, _v|
      %w[PWD HOME LOGNAME USER USERNAME HOSTNAME].include?(k)
    end
  end.freeze.tap do |env|
    # @formatter:off
    {
      '/etc/profile.d/environment.sh' => ->(fp) { fp.write(env.export) },
      '/etc/environment' => ->(fp) { fp.write(env.prepend(fp)) }
    }.sort.map do |filepath, func|
      func.call(Pathname.new(filepath))
      chmod(0o444, filepath)
    end
    # @formatter:on
  end
end
