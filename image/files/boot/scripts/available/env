#!/usr/bin/env ruby
# frozen_string_literal: true

# noinspection RubyResolve
$LOAD_PATH.unshift('/boot/lib/ruby').tap { require 'boot' }

# Execution
#
# Write files:
# * /etc/profile.d/environment.sh
# * /etc/environment
#
# Shares environment, retrieved from Docker, to be seen from shells (ssh).
if __FILE__ == $PROGRAM_NAME
  autoload(:Pathname, 'pathname')
  autoload(:FileUtils, 'fileutils')
  # rubocop:disable Style/MixinUsage
  include(FileUtils::Verbose)
  # rubocop:enable Style/MixinUsage

  at_exit { GC.start }

  Boot::Env::Export.new.tap do |env|
    env.delete_if do |k, _v|
      %w[PWD HOME LOGNAME USER USERNAME HOSTNAME].include?(k)
    end
  end.freeze.tap do |env|
    Boot::ThreadPool.new do |pool|
      # @formatter:off
      {
        '/etc/profile.d/environment.sh' => ->(fp) { fp.write(env.export) },
        '/etc/environment' => ->(fp) { fp.write(env.prepend(fp)) }
      }.sort.map do |filepath, func|
        pool.schedule do
          func.call(Pathname.new(filepath))
          chmod(0o444, filepath)
        end
      end
      # @formatter:on
    end
  end
end
