#!/usr/bin/env ruby
# coding: utf-8
# frozen_string_literal: true

# Generate (as required) and install hostkey.
#
# When a (openssh) PEM file is present, it will be used to generate
# a RSA (dropbear) key. Instead, if a RSA file is present, it will be used.
# Hostkey already present will be overwritten by the result of this script.
class SetupSSH
  autoload(:Pathname, 'pathname')
  autoload(:FileUtils, 'fileutils')
  include(FileUtils::Verbose)

  # @formatter:off
  BOOT_FILES = {
    'pem': 'host_rsa.pem',
    'rsa': 'host_rsa',
  }.map { |key, name| [key, Pathname.new('/boot/ssh').join(name)] }.to_h.freeze
  # @formatter:on

  def initialize(confdir = ENV['DROPBEAR_CONFDIR'])
    @confdir = Pathname.new(confdir || '/etc/dropbear')
  end

  def call
    confdir.join('host_rsa').tap do |host_rsa|
      mkdir_p(confdir) unless confdir.exist?
      (BOOT_FILES[:pem].file? ? :mv : :cp).tap do |m|
        self.__send__(m, gen_key.to_s, host_rsa.to_s)
      end
      chmod(0o600, host_rsa.to_s)
    end
  end

  protected

  attr_reader :confdir

  # Execute given args as a command line.
  #
  # @raise [RuntimeError]
  def sh(*args)
    system(*args) || lambda do
      raise args.inspect
    end.call
  end

  # Convert PEM file
  #
  # @return [Array<Pathname>]
  def pem_convert
    [BOOT_FILES.fetch(:pem), BOOT_FILES.fetch(:rsa)].tap do |files|
      if files[0].file?
        sh('dropbearconvert',
           'openssh',
           'dropbear',
           files[0].to_s, files[1].to_s)
      end
    end
  end

  # Generate server key.
  #
  # @return [Pathname]
  def gen_key
    BOOT_FILES.fetch(:rsa).tap do |rsa|
      pem_convert
      unless rsa.file?
        sh('dropbearkey', '-f', rsa.to_s, '-t', 'rsa')
      end
    end
  end
end

# Execute setup
SetupSSH.new.call if __FILE__ == $PROGRAM_NAME
