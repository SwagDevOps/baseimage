#!/usr/bin/env ruby
# coding: utf-8
# frozen_string_literal: true

autoload(:Pathname, 'pathname')
autoload(:FileUtils, 'fileutils')
include(FileUtils::Verbose)

# Install server key.
class SetupSSH
  # @formatter:off
  BOOT_FILES = {
    'pem': 'host_rsa.pem',
    'rsa': 'host_rsa',
  }.map { |key, name| [key, Pathname.new('/boot/ssh').join(name)] }.to_h.freeze
  # @formatter:on

  def initialize(confdir = ENV.fetch('DROPBEAR_CONFDIR', '/etc/dropbear'))
    @confdir = Pathname.new(confdir)
  end

  def call
    confdir.join('host_rsa').tap do |host_rsa|
      mkdir_p(confdir) unless confdir.exist?
      cp(gen_key.to_s, host_rsa.to_s)
      chmod(0o600, host_rsa.to_s)
    end
  end

  protected

  attr_reader :confdir

  # Execute given args as a command line.
  #
  # @raise [RuntimeError]
  def sh(*args)
    system(*args) || lambda do
      raise args.inspect
    end.call
  end

  # Convert PEM file
  #
  # @return [Array<Pathname>]
  def pem_convert
    [BOOT_FILES.fetch(:pem), BOOT_FILES.fetch(:rsa)].tap do |files|
      if files[0].file?
        sh('dropbearconvert',
           'openssh',
           'dropbear',
           files[0].to_s, files[1].to_s)
      end
    end
  end

  # Generate server key.
  #
  # @return [Pathname]
  def gen_key
    BOOT_FILES.fetch(:rsa).tap do |rsa|
      pem_convert
      unless rsa.file?
        sh('dropbearkey', '-f', rsa.to_s, '-t', 'rsa')
      end
    end
  end
end

# Execute setup
SetupSSH.new.call if __FILE__ == $PROGRAM_NAME
